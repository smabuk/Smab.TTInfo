@page "/print/scorecard/maidenhead"
@layout PrintLayout
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Print Maidenhead Score Cards</PageTitle>

@* Can't put this in the css file as the at-rule page affects other razor pages *@
<style>
	@@page {
		size: A4 landscape;
		margin: 1cm;
	}
</style>

<article>
	<div class="control-panel">
		<button class="btn btn-primary m-3" @onclick="PrintCards">Print All Scorecards</button>
		<label for="no-of-pages">No of pages:</label><InputNumber id="no-of-pages" @bind-Value="NoOfPages" inputmode="number" min="1" max="99" step="1" />
		<label for="shaded">Shaded:</label><InputCheckbox id="shaded" @bind-Value="isShaded"></InputCheckbox>
		<label for="bordered">Bordered:</label><InputCheckbox id="bordered" @bind-Value="isBordered"></InputCheckbox>
	</div>

	@if (isShaded is false) {
		<style>
			:root {
				--ttinfo-override-shading-colour: #fff;
				--ttinfo-override-edit-colour: #fff;
			}
		</style>
	}


	@for (int page = 0; page < NoOfPages; page++) {
		<div class="page">
			@foreach (int i in (int[])[1, 2]) {
				<div class="score-sheet@(isBordered is true ? " bordered" : null)">
					<header>
						<h1>MAIDENHEAD & DISTRICT TABLE TENNIS ASSOCIATION</h1>
					</header>

					<div class="main-content">
						<div class="main-panel">
							<section>
								<h3 class="visually-hidden">Fixture Information</h3>
								<div class="top-info">
									<div>
										<span>Date:</span>
										<span class="dots"></span>
									</div>
									<div>
										<span>Division:</span>
										<span class="dots"></span>
									</div>
									<div>
										<span>Week No.</span>
										<span class="dots"></span>
									</div>
								</div>

								<div class="teams-header">
									<div class="team-line">
										<span class="dots"></span>
										<span class="vs">v</span>
										<span class="dots"></span>
									</div>
									<div class="team-labels">
										<span>Home Team Name</span>
										<span>Away Team Name</span>
									</div>
								</div>

							</section>
							<section class="players-section">
								<h3 class="visually-hidden">Players</h3>
								<div class="players">
									<div class="player-list">
										<div><span>A</span><span class="dots"></span></div>
										<div><span>B</span><span class="dots"></span></div>
										<div><span>C</span><span class="dots"></span></div>
									</div>
									<div class="player-list">
										<div><span>X</span><span class="dots"></span></div>
										<div><span>Y</span><span class="dots"></span></div>
										<div><span>Z</span><span class="dots"></span></div>
									</div>
								</div>
								<div>
									<div class="doubles">
										<span class="dots"></span>
										<span>Doubles</span>
										<span class="dots"></span>
									</div>
								</div>


							</section>
							<section>
								<h3 class="visually-hidden">Match Results</h3>
								<table class="matches-table">
									<thead>
										<tr>
											<th></th>
											<th>1</th>
											<th>2</th>
											<th>3</th>
											<th>4</th>
											<th>5</th>
											<th>H</th>
											<th>A</th>
										</tr>
									</thead>
									<tbody>
										@foreach (MarkupString match in matchOrder) {
											<tr>
												<td data-match="@match">@match</td>
												<td></td>
												<td></td>
												<td></td>
												<td></td>
												<td></td>
												<td></td>
												<td></td>
											</tr>
										}
									</tbody>
								</table>
							</section>

							<div class="signature-section">
								<div class="signature-labels">
									<span>(Home)</span>
									<span>Captain's Signatures</span>
									<span>(Away)</span>
								</div>
								<div class="signature-line">
									<span class="dots"></span>
									<span class="dots"></span>
								</div>
							</div>
						</div>
					</div>
				</div>

				@if (int.IsOddInteger(i)) {
					<div class="mid-break"></div>
				}
			}
		</div>

		@if (page < NoOfPages - 1) {
			<div class="page-break"></div>
		}
	}
</article>

@code {
	[Parameter, SupplyParameterFromQuery]
	public bool? Bordered { get; set; }

	[Parameter, SupplyParameterFromQuery]
	public bool? Shaded { get; set; }

	[Parameter, SupplyParameterFromQuery]
	public int? NoOfPages { get; set; }

	private bool isBordered;
	private bool isShaded;

	private (string HomeOrAway, string[] Letters)[] playerLetters = [
		("Home", ["A", "B", "C"]),
		("Away", ["X", "Y", "Z"])
	];

	// Order of matches as per Maidenhead League rules
	private string[] matchOrder = ["A v X", "B v Y", "C v Z", "B v X", "A v Z", "C v Y", "B v Z", "C v X", "A v Y", "Doubles"];

	protected override void OnParametersSet()
	{
		NoOfPages ??= 1;
		isBordered = Bordered ?? true;
		isShaded = Shaded ?? false;
	}

	private MarkupString Spaces(int count) => (MarkupString)(string.Join("", Enumerable.Repeat("&nbsp;", count)));
	private void PrintCards() => JS.InvokeVoidAsync("window.print");
}
