@page "/Recent/{LeagueId}/{NoOfDays:int?}"
@inject ITT365Reader _tt365

<PageTitle>Last @NoOfDays Days - @LeagueId</PageTitle>

<h1>Recent Results</h1>

@if (fixtures.Count == 0)
{
	<h2>Loading ... Results for the last @NoOfDays days ...</h2>
}
else
{
	<div id="fixtures">
		@foreach (var fixture in fixtures)
		{
			FixtureResult? fr;
			fixtureResults.TryGetValue((fixture as CompletedFixture)?.Id ?? 0, out fr);
			<div class="card">
				<div class="row">
					<div class="col-12 col-sm-4 col-md-4 col-lg-3">
						@if (fixture is PostponedFixture pf)
						{
							<span class="postponed badge" title="@pf.Postponed">P</span>
						}
						<time datetime="@fixture.Date.ToString("yyyy-MM-dd") @(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? "19:00" : "19:30")">@fixture.Date.ToString("ddd dd MMM")@(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? " 19:00" : "") </time>
					</div>
					<div class="col-12 col-sm-8 col-md-8 col-lg-9">
						@if (fixture is CompletedFixture completedFixture1 && fr is not null)
						{
							<a class="badge badge-sm" href="@completedFixture1.CardURL" target="_blank" rel="noopener">@fr.FullScore</a>
						}
						@if (fr is not null && fr.HomeWin)
						{
							<strong>@fixture.HomeTeam</strong>
						} else
						{
							<span>@fixture.HomeTeam</span>
						}
						vs
						@if (fr is not null && fr.AwayWin)
						{
							<strong>@fixture.AwayTeam</strong>
						} else
						{
							<span>@fixture.AwayTeam</span>
						}
					</div>
				</div>
				@if (fixture is PostponedFixture postponed)
				{
					<div class="row">
						<div class="col-12 col-sm-4 col-md-4 col-lg-3">
							@fixture.Division
						</div>
						<div class="col-12 col-md-8 col-lg-9">
							@postponed.Postponed
						</div>
					</div>
				}
				@if (fixture is CompletedFixture completedFixture)
				{
					<div class="row justify-content-end">
						<div class="col-12 col-sm-4 col-md-4 col-lg-3">
							@fixture.Division
						</div>
						<div class="col-12 col-sm-8 col-md-8 col-lg-9">
							Home:
							@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon))
							{
								<span class="@(player.PoM ? "pom" : "")"><text>@($"{player.Name} {player.SetsWon} ")</text></span>
							}
						</div>
					</div>
					<div class="row justify-content-end">
						<div class="col-12 col-sm-8 col-md-8 col-lg-9">
							Away:
							@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon))
							{
								<span class="@(player.PoM ? "pom" : "")">@($"{player.Name} {player.SetsWon} ")</span>
							}
						</div>
					</div>
					<div class="row justify-content-end">
						<div class="col-12 col-sm-8 col-md-8 col-lg-9">
							Doubles: @completedFixture.DoublesWinner
						</div>
					</div>
				}
			</div>
		}
	</div>
}


@code {
	[Parameter]
	public int? NoOfDays { get; set; }

	[EditorRequired]
	[Parameter]
	public string LeagueId { get; set; } = "";

	private List<Fixture> fixtures = new();
	private Dictionary<int, FixtureResult> fixtureResults = new();
	private League? league;

	protected override async Task OnParametersSetAsync()
	{
		fixtures = new();
		StateHasChanged();
		league = await _tt365.GetLeague(LeagueId);
		DateOnly today = DateOnly.FromDateTime(DateTime.Now);
		NoOfDays = NoOfDays ?? 6;

		fixtures = (await _tt365.GetAllFixtures(LeagueId, league?.CurrentSeason.Id) ?? new())
						.Where(f => f.Date <= today && f.Date >= today.AddDays(- (int)NoOfDays))
						.Where(f => f is CompletedFixture || f is PostponedFixture)
						.ToList();
		foreach (var fixture in fixtures)
		{
			if (fixture is CompletedFixture completedFixture)
			{
				bool homeWin = (completedFixture.ForHome > completedFixture.ForAway);
				bool awayWin = (completedFixture.ForHome < completedFixture.ForAway);
				string fullScore = $"{completedFixture.ForHome} - {completedFixture.ForAway}";
				fixtureResults.TryAdd(completedFixture.Id, new(Id: completedFixture.Id, HomeWin: homeWin, AwayWin: awayWin, FullScore: fullScore));
			}
		}
	}

	private record FixtureResult(int Id, bool HomeWin, bool AwayWin, string FullScore);

}
