@page "/TeamSummary/{LeagueName}/{TeamName}"
@inject ITT365Reader _tt365

<PageTitle>@TeamName - @LeagueName</PageTitle>

@if (team is null) {
    <h1>Loading ... @TeamName ...</h1>
} else {
<h1><a href="@fixturesView.URL" target="_blank" rel="noopener"><i class="fas fa-external-link-square-alt"></i></a> @TeamName</h1>
@*<h3>@fixturesView.Caption</h3>*@

<div id="fixtures">
	@foreach (var fixture in fixturesView.Fixtures!)
	{
        FixtureResult? fr;
        fixtureResults.TryGetValue(fixture.Id, out fr);
        <div class="card" data-result='@fr?.Result'>
		    <div class="row">
			    <div class="col-12 col-sm-5 col-md-4 col-lg-3"><time datetime="@fixture.Date.ToString("yyyy-MM-dd") @(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? "19:00" : "19:30")">@fixture.Date.ToString("ddd dd MMM")@(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? " 19:00" : "") </time></div>
			    <div class="col-12 col-sm-7 col-md-8 col-lg-9">
				    @if (fr is not null)
				    {
					    <a class="badge badge-sm" href="@fixture.CardURL" target="_blank">@fr.FullScore</a>
				    }
				    <strong>@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)</strong>
				    <span> @@ @fixture.Venue</span>
			    </div>
		    </div>
		    <div class="row justify-content-end">
			    <div class="col-12 col-md-8 col-lg-9">
				    @if (fixture.HomeTeam.Equals(@team.Name))
				    {
					    @teamPlayersList[fixture.AwayTeam];
				    }
				    else
				    {
					    @teamPlayersList[fixture.HomeTeam];
				    }
			    </div>
		    </div>
        </div>
		}
</div>
<h2>Team Stats</h2>
<div id="teamstats" class="card">
    <div>
        <div>Captain: <span>@team.Captain</span></div>
        <div>Caption: <span>@team.Caption</span></div>
    </div>
    <table id="players" class="table table-bordered table-sm">
        <caption class="container-fluid">Players</caption>
        <thead>
            <tr>
                <th>Name</th>
                <th>Played</th>
                <th>Win %</th>
                <th>Ranking</th>
                <th class="">PoM Awards</th>
                <th>Form</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in team.Players!)
            {
            <tr>
                <td><a href="@player.PlayerURL" target="_blank" rel="noopener">@player.Name</a></td>
                <td>@player.Played</td>
                <td>@player.WinPercentage</td>
                <td>@player.LeagueRanking</td>
                <td>@player.PoMAwards</td>
                <td>@player.Form</td>
            </tr>
            }
        </tbody>
    </table>
    <table id="results" class="table table-bordered table-sm">
        <caption class="container-fluid">Results</caption>
        <thead>
            <tr>
                <th>Opposition</th>
                <th>Home Or Away</th>
                <th>Date</th>
                <th>Score</th>
                <th>Points</th>
                <th>Player Of The Match</th>
                <th>Card</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in team.Results!)
            {
                <tr>
                    <td>@result.Opposition</td>
                    <td>@result.HomeOrAway</td>
                    <td>@result.Date.ToString("ddd MMM dd yyyy")</td>
                    <td>@result.ScoreForHome-@result.ScoreForAway</td>
                    <td>@result.Points</td>
                    <td>@result.PlayerOfTheMatch</td>
                    <td><a href="@result.CardURL" target="_blank" rel="noopener"><i class="fas fa-external-link-square-alt"></i></a></td>
                </tr>
            }
        </tbody>
    </table>
</div>
}


@code {
    [EditorRequired]
    [Parameter]
    public string TeamName { get; set; } = "";

    [EditorRequired]
    [Parameter]
    public string LeagueName { get; set; } = "";

    private Team? team;
    private FixturesView fixturesView = new();
	static Dictionary<string, string> teamPlayersList = new();
	static Dictionary<int, FixtureResult> fixtureResults = new();

    protected override async Task OnParametersSetAsync() {
		TeamName = TeamName.Replace("_", " ");
        team = null;
        StateHasChanged();
        team = await _tt365.GetTeamStats(TeamName);
        if (team is not null) {
            fixturesView = await _tt365.GetFixturesByTeamName(TeamName) ?? new();
            foreach (var fixture in fixturesView.Fixtures!) 
            {
                if (fixture.IsCompleted) {
                    string result;
                    string fullScore;
                    if (fixture.HomeTeam.Equals(@team.Name))
                    {
                        result = (fixture.ForHome > fixture.ForAway) ? "win" : (fixture.ForHome < fixture.ForAway) ? "loss" : "draw";
                        fullScore = $"{fixture.ForHome} - {fixture.ForAway}";
                    } else {
                        result = (fixture.ForHome > fixture.ForAway) ? "loss" : (fixture.ForHome < fixture.ForAway) ? "win" : "draw";
                        fullScore = $"{fixture.ForAway} - {fixture.ForHome}";
                    }
                    fixtureResults.TryAdd(fixture.Id, new(fixture.Id, result, fullScore));
                }
                if (!teamPlayersList.ContainsKey(fixture.HomeTeam)) {
                    teamPlayersList.TryAdd(fixture.HomeTeam, String.Join(", ", (await _tt365.GetTeamStats(fixture.HomeTeam))?.PlayersList ?? new()));
		        }
		        if (!teamPlayersList.ContainsKey(fixture.AwayTeam)) {
                    teamPlayersList.TryAdd(fixture.AwayTeam, String.Join(", ", (await _tt365.GetTeamStats(fixture.AwayTeam))?.PlayersList ?? new()));
		        }
            }
        }
    }

    private record FixtureResult (int Id, string Result, string FullScore);

}
