@page "/TeamSummary/{LeagueName}/{TeamName}"
@inject ITT365Reader _tt365

<PageTitle>@TeamName - @LeagueName</PageTitle>

@if (team is null) {
    <h1>Loading ... @TeamName ...</h1>
} else {
<h1>@TeamName</h1>

<div id="fixtures">
	@foreach (var fixture in fixtures)
	{
        FixtureResult? fr;
        fixtureResults.TryGetValue(fixture.Id, out fr);
        <div class="card" data-result='@fr?.Result'>
		    <div class="row">
			    <div class="col-12 col-sm-4 col-md-4 col-lg-3">
                    @if (fixture.IsPostponed) {
                        <span class="postponed badge" title="@fixture.Postponed">P</span>
                    }
                    <time datetime="@fixture.Date.ToString("yyyy-MM-dd") @(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? "19:00" : "19:30")">@fixture.Date.ToString("ddd dd MMM")@(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? " 19:00" : "") </time>
                </div>
			    <div class="col-12 col-sm-8 col-md-8 col-lg-9">
				    @if (fr is not null)
				    {
					    <a class="badge badge-sm" href="@fixture.CardURL" target="_blank" rel="noopener">@fr.FullScore</a>
				    }
				    <strong>@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)</strong>
				    <span> @@ @fixture.Venue</span>
			    </div>
		    </div>
		    <div class="row justify-content-end">
			    <div class="col-12 col-md-8 col-lg-9">
				    @if (fixture.HomeTeam.Equals(@team.Name))
				    {
					    @teamPlayersList[fixture.AwayTeam];
				    }
				    else
				    {
					    @teamPlayersList[fixture.HomeTeam];
				    }
			    </div>
		    </div>
        </div>
	}
</div>
<h2>Team Stats</h2>
<div id="teamstats" class="card">
    <div>
        <div>Captain: <span>@team.Captain</span></div>
        <div>Caption: <span>@team.Caption</span></div>
    </div>
    <div id="players">
        <table class="table table-bordered table-sm">
            <caption class="container-fluid">Players</caption>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Played</th>
                    <th>Win %</th>
                    <th>Ranking</th>
                    <th class="">PoM</th>
                    <th>Form</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in team.Players!.OrderByDescending(p => p.WinPercentage).ThenByDescending(p => p.Played))
                {
                <tr>
                    <td><a href="@player.PlayerURL" target="_blank" rel="noopener">@player.Name</a></td>
                    <td><span>@(new string('0', 2 - player.Played.ToString().Length))</span>@player.Played</td>
                    <td><span>@(new string('0', 3 - player.WinPercentage.ToString("##0").Length))</span>@($"{player.WinPercentage:##0.##}")<span>@(new string('0', 6 - player.WinPercentage.ToString("000.##").Length))</span></td>
                    <td><span>@(new string('0', 3 - player.LeagueRanking.ToString().Length))</span>@player.LeagueRanking</td>
                    <td><span>@(new string('0', 2 - player.PoMAwards.ToString().Length))</span>@player.PoMAwards</td>
                    <td>@player.Form</td>
                </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="results">
        <table class="table table-bordered table-sm">
            <caption class="container-fluid">Results</caption>
            <thead>
                <tr>
                    <th>Opposition</th>
                    <th>Home Or Away</th>
                    <th>Date</th>
                    <th>Score</th>
                    <th>Points</th>
                    <th>Player Of The Match</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in team.Results!)
                {
                    <tr data-result='@result.MatchResult'>
                        <td>@result.Opposition</td>
                        <td>@result.HomeOrAway</td>
                        <td>@result.Date.ToString("dd MMM yyyy")</td>
                        <td><a href="@result.CardURL" target="_blank" rel="noopener"><span>@(new string('0', 2 - $"{result.ScoreForTeam}".Length))</span>@result.ScoreForTeam-@result.ScoreForOpposition<span>@(new string('0', 2 - $"{result.ScoreForOpposition}".Length))</span></a></td>
                        <td><span>@(new string('0', 2 - result.Points.ToString().Length))</span>@result.Points</td>
                        <td>@result.PlayerOfTheMatch</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
}


@code {
    [EditorRequired]
    [Parameter]
    public string TeamName { get; set; } = "";

    [EditorRequired]
    [Parameter]
    public string LeagueName { get; set; } = "";

    private Team? team;
    private List<Fixture> fixtures = new();
	private Dictionary<string, string> teamPlayersList = new();
	private Dictionary<int, FixtureResult> fixtureResults = new();

    protected override async Task OnParametersSetAsync() {
		TeamName = TeamName.Replace("_", " ");
        team = null;
        fixtures = new();
        StateHasChanged();
        team = await _tt365.GetTeamStats(TeamName);
        if (team is not null) {
            fixtures = (await _tt365.GetAllFixtures(LeagueName) ?? new()).Where( f => f.HomeTeam == TeamName || f.AwayTeam == TeamName ).ToList();
            foreach (var fixture in fixtures )
            {
                if (fixture.IsCompleted) {
                    string result;
                    string fullScore;
                    if (fixture.HomeTeam.Equals(@team.Name))
                    {
                        result = (fixture.ForHome > fixture.ForAway) ? "win" : (fixture.ForHome < fixture.ForAway) ? "loss" : "draw";
                        fullScore = $"{fixture.ForHome} - {fixture.ForAway}";
                    } else {
                        result = (fixture.ForHome > fixture.ForAway) ? "loss" : (fixture.ForHome < fixture.ForAway) ? "win" : "draw";
                        fullScore = $"{fixture.ForAway} - {fixture.ForHome}";
                    }
                    fixtureResults.TryAdd(fixture.Id, new(fixture.Id, result, fullScore));
                }

                if (!teamPlayersList.ContainsKey(fixture.HomeTeam)) {
                    var players = (await _tt365.GetTeamStats(fixture.HomeTeam))?.Players;
	                List<string> playersList = (from p in players orderby p.WinPercentage descending select p.Name + " (" + Math.Round(p.WinPercentage, 0) + "%)").ToList();
                    teamPlayersList.TryAdd(fixture.HomeTeam, String.Join(", ", playersList));
		        }
		        if (!teamPlayersList.ContainsKey(fixture.AwayTeam)) {
                    var players = (await _tt365.GetTeamStats(fixture.AwayTeam))?.Players;
	                List<string> playersList = (from p in players orderby p.WinPercentage descending select p.Name + " (" + Math.Round(p.WinPercentage, 0) + "%)").ToList();
                    teamPlayersList.TryAdd(fixture.AwayTeam, String.Join(", ", playersList));
		        }
            }
        }
    }

    private record FixtureResult (int Id, string Result, string FullScore);

}
