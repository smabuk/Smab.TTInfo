@page "/TTLeagues/PlayerSummary/{TTInfoId}/{PlayerId}"
@page "/TTLeagues/PlayerSummary/{TTInfoId}/{PlayerName}/{PlayerId}"
@page "/TTLeagues/PlayerSummary/{TTInfoId}/{CompetitionId:int}/{PlayerId}"
@attribute [StreamRendering]

<PageTitle>@PlayerName - @TTInfoId</PageTitle>

@if (playerStatsList is null || playerStatsList.Count == 0) {
	<h1>Loading ... @PlayerName ...</h1>
} else {
	<h1>@league?.TTInfoId</h1>
	<h1>Player Stats for @PlayerName</h1>
	<div id="results">
		@foreach (PlayerStats ps in playerStatsList.OrderByDescending(p => p.Competition.Key)) {
			@foreach (PlayerResult psr in ps.Results) {
				<h3>@psr.Team.Value</h3>
				<table class="table table-bordered table-sm">
					<thead>
						<tr>
							<th>Opponent</th>
							<th>Div</th>
							<th>Team</th>
							<th>Date</th>
							<th>Games</th>
							<th>Score</th>
							<th>Ranking</th>
						</tr>
					</thead>
					<tbody>
						@foreach (PlayerResult result in psr.Results.Where(res => res.Opponent.Key is not null).OrderByDescending(p => p.Date).ThenByDescending(p => p.SetId)) {
							<tr data-result='@CalculateResult(result.For, result.Against)'>
								<td><a href="TTLeagues/PlayerSummary/@TTInfoId/@result.Opponent.Value/@result.Opponent.Key">@result.Opponent.Value</a></td>
								<td>@CalculateDivisionName(ps.Division.Value, result.DivisionId)</td>
								<td>@result.Versus.Value</td>
								<td>@result.Date.ToUKTime().ToString("dd MMM yyyy")</td>
								<td><a href="TTLeagues/Match/@TTInfoId/@result.MatchId" rel="noopener">@result.For-@result.Against</a></td>
								<td>@String.Join(", ", result.Games)</td>
								<td>@(result.Score?.ToString("+##0;-##0;0") ?? "n/a")</td>
							</tr>
						}
					</tbody>
				</table>
				<div id="stats">
					<h3>Stats</h3>
					<dl>
						<dt>Wins:</dt>
						<dd>@($"{(ps.Average.Won * 100 / ps.Average.Played)}% - {ps.Average.Won} out of {ps.Average.Played}")</dd>
						<dt>Losses:</dt>
						<dd>@($"{(100 - (ps.Average.Won * 100 / ps.Average.Played))}% - {ps.Average.Played - ps.Average.Won} out of {ps.Average.Played}")</dd>
						<dt>Won in 3:</dt>
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "win"  && res.Games.Count == 3).Count()</dd>
						<dt>Won in 4:</dt>															 
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "win"  && res.Games.Count == 4).Count()</dd>
						<dt>Won in 5:</dt>															 
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "win"  && res.Games.Count == 5).Count()</dd>
						<dt>Lost in 5:</dt>
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "loss" && res.Games.Count == 5).Count()</dd>
						<dt>Lost in 4:</dt>
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "loss" && res.Games.Count == 4).Count()</dd>
						<dt>Lost in 3:</dt>
						<dd>@psr.Results.Where(res => CalculateResult(res.For, res.Against) == "loss" && res.Games.Count == 3).Count()</dd>
						<dt>Ranking Position:</dt>
						<dd>@($"{ps.LocalRanking.Position}")</dd>
						<dt>Ranking Points:</dt>
						<dd>@($"{ps.LocalRanking.Score}")</dd>
						<dt>Ranking pts gained:</dt>
						<dd>@($"{psr.Results.Sum(res => res.Score)}")</dd>
					</dl>
				</div>
			}
		}
	</div>
}