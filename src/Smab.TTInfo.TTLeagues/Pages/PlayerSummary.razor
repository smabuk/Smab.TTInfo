@page "/TTLeagues/PlayerSummary/{TTInfoId}/{PlayerName}/{PlayerId}"
@inject TTLeaguesReader _ttleagues
@attribute [StreamRendering]

<PageTitle>@PlayerName - @TTInfoId</PageTitle>

@if (playerStatsList is null || playerStatsList.Count == 0) {
	<h1>Loading ... @PlayerName ...</h1>
} else {
	<h1>@PlayerName</h1>
	<h2>Player Stats</h2>
	<div id="results">
		@foreach (PlayerStats ps in playerStatsList.OrderByDescending(p => p.Competition.Key)) {
			@foreach (PlayerResult psr in ps.Results) {
			<h3>Results</h3>
				<table class="table table-bordered table-sm">
					<thead>
						<tr>
							<th>Opponent</th>
							<th>Div</th>
							<th>Team</th>
							<th>Date</th>
							<th>Games</th>
							<th>Score</th>
							<th>Ranking</th>
						</tr>
					</thead>
					<tbody>
						@foreach (PlayerResult result in psr.Results.OrderByDescending(p => p.Date)) {
							<tr data-result='@CalculateMatchResult(result.For, result.Against)'>
								<td><a href="TTLeagues/PlayerSummary/@TTInfoId/@result.Opponent.Value/@result.Opponent.Key">@result.Opponent.Value</a></td>
								<td>@CalculateDivisionName(ps.Division.Value, result.DivisionId)</td>
								<td>@result.Versus.Value</td>
								<td>@result.Date.ToUKTime().ToString("dd MMM yyyy")</td>
								<td><a href="@result.MatchId" target="_blank" rel="noopener">@result.For-@result.Against</a></td>
								<td>@String.Join(", ", result.Games)</td>
								<td>@(result.Score?.ToString("+##0;-##0;0") ?? "n/a")</td>
							</tr>
						}
					</tbody>
				</table>
			}
		}
	</div>
}

@code {
	[EditorRequired]
	[Parameter]
	public required string PlayerId { get; set; }

	[EditorRequired]
	[Parameter]
	public string PlayerName { get; set; } = "";

	[EditorRequired]
	[Parameter]
	public string TTInfoId { get; set; } = "";

	private List<PlayerStats> playerStatsList = [];
	private Dictionary<int, string> divisionNames = [];
	private League? league;
	List<LookupValue> lookup = [];

	protected override async Task OnParametersSetAsync()
	{
		playerStatsList = [];
		StateHasChanged();
		league = await _ttleagues.GetLeague(TTInfoId);
		lookup = await _ttleagues.GetLookupTables(TTInfoId);

		if (league is not null) {
			List<int> competitionIds = league
				.CurrentCompetitions
				.Where(c => c.Id is> 0)
				.Select(c => c.Id)
				.ToList();

			foreach (int competitionId in competitionIds) {
				PlayerStats? playerStats = await _ttleagues.GetPlayerStats(PlayerId, TTInfoId, competitionId);
				if (playerStats is not null) {
					playerStatsList.Add(playerStats);
				}
			}
		}
		StateHasChanged();
	}

	string CalculateDivisionName(string name, int id)
	{
		if (String.IsNullOrWhiteSpace(name) || String.Equals(name, "no division", StringComparison.InvariantCultureIgnoreCase)) {
			if (divisionNames.ContainsKey(id)) {
				name = divisionNames[id];
			} else {
				name = lookup
					.Where(l => l.Type == LookupType.Division && l.Id == id)
					.Select(l => l.Name)
					.First();
				divisionNames.Add(id, name);
			}
		}
		return name.Replace("division", "", StringComparison.InvariantCultureIgnoreCase).Trim();
	}

	string CalculateMatchResult(int scoreFor, int scoreAgainst)
	{
		return (scoreFor - scoreAgainst) switch
		{
			> 0 => "win",
			< 0 => "loss",
			0 => "draw",
		};
	}

}
