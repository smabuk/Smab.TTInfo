@page "/TTLeagues/TeamSummary/{TTInfoId}/{TeamName}"
@page "/TTLeagues/TeamSummary/{TTInfoId}/{TeamName}/{TeamId:int}"
@inject TTLeaguesReader _ttleagues
@attribute [StreamRendering]

<PageTitle>@TeamName - @TTInfoId</PageTitle>

@if (fixtures is null || fixtures.Count == 0) {
	<h1>Loading ... @TeamName ...</h1>
} else {
	<h1>@TeamName</h1>
	<div id="fixtures">
		@foreach (Match match in fixtures) {
			FixtureResult? fr;
			MatchCard? matchCard;
			fixtureResults.TryGetValue(match.Id, out fr);
			matchCards.TryGetValue(match.Id, out matchCard);
			<details class="card" data-result='@fr?.Result'>
				<summary class="row">
					<div class="col-12 col-sm-4 col-md-4 col-lg-3">
						@if (match.Date is null) {
							<span class="badge postponed" title="Postponed">P</span>
						}
						<time datetime="@match.Time.ToUtcString()">@match.Time?.ToUKTime().ToString("ddd dd MMM HH:mm")</time>
					</div>
					<div class="col-12 col-sm-8 col-md-8 col-lg-9">
						@if (match.HasResults) {
							<a class="badge badge-sm" href="@CalculateMatchHref(match)" target="_blank" rel="noopener">@fr?.FullScore</a>
						}
						<a href="TTLeagues/TeamSummary/@TTInfoId/@(match.Home.Name.Equals(@TeamName) ? match.Away.Name : match.Home.Name)/@(match.Home.Name.Equals(@TeamName) ? match.Away.TeamId : match.Home.TeamId)">
							<strong>@(match.Home.Name.Equals(@TeamName) ? match.Away.Name : match.Home.Name)</strong>
						</a>
						@if (string.IsNullOrEmpty(match.Venue) is false) {
							<span class="mx-1"> @@ @match.Venue</span>
						}
					</div>
				</summary>
@*
				@if (match.Date is null) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-8 col-lg-9">
							@postponed.Reason
						</div>
					</div>
				}
 *@
				@if (matchCard is not null) {
@*
					@if (completedFixture.Other is not null) {
						<div class="row justify-content-end">
							<div class="col-12 col-md-8 col-lg-9">
								@completedFixture.Other
							</div>
						</div>
					}
*@
					@if (match.Home.TeamId.Equals(TeamId)) {
						<div class="row justify-content-end">
							<div class="col-12 col-md-8 col-lg-9">
								@foreach (PlayerScore player in matchCard.Results.Home.OrderByDescending(p => p.Score)) {
									<span class="@(player.UserId == matchCard.Match.Potm?.Id ? "pom" : "")"><text><a href="TTLeagues/PlayerSummary/@TTInfoId/@player.Name/@player.UserId">@($"{player.Name}")</a> @($" {player.Score} ")</text></span>
								}
							</div>
						</div>
						<div class="row justify-content-end">
							<div class="col-12 col-md-8 col-lg-9">
								@foreach (PlayerScore player in matchCard.Results.Away.OrderByDescending(p => p.Score)) {
									<span class="@(player.UserId == matchCard.Match.Potm?.Id ? "pom" : "")"><a href="TTLeagues/PlayerSummary/@TTInfoId/@player.Name/@player.UserId">@($"{player.Name}")</a> @($" {player.Score} ")</span>
								}
							</div>
						</div>
					} else {
						<div class="row justify-content-end">
							<div class="col-12 col-md-8 col-lg-9">
								@foreach (PlayerScore player in matchCard.Results.Away.OrderByDescending(p => p.Score)) {
									<span class="@(player.UserId == matchCard.Match.Potm?.Id ? "pom" : "")"><a href="TTLeagues/PlayerSummary/@TTInfoId/@player.Name/@player.UserId">@($"{player.Name}")</a> @($" {player.Score} ")</span>
								}
							</div>
						</div>
						<div class="row justify-content-end">
							<div class="col-12 col-md-8 col-lg-9">
								@foreach (PlayerScore player in matchCard.Results.Home.OrderByDescending(p => p.Score)) {
									<span class="@(player.UserId == matchCard.Match.Potm?.Id ? "pom" : "")"><text><a href="TTLeagues/PlayerSummary/@TTInfoId/@player.Name/@player.UserId">@($"{player.Name}")</a> @($" {player.Score} ")</text></span>
								}
							</div>
						</div>
					}
					<div class="row justify-content-end">
						<div class="col-12 col-sm-8 col-md-8 col-lg-9">
							@CalculateDoublesWinners(matchCard)
						</div>
					</div>
				} else {
 					<div class="row justify-content-end">
						<div class="col-12 col-md-8 col-lg-9">
							@if (match.Home.TeamId.Equals(TeamId)) {
								<text>@(teamPlayersList.ContainsKey(match.Away.TeamId ?? -1) ? @teamPlayersList[match.Away.TeamId ?? -1] : "Loading ...")</text>
							} else {
								<text>@(teamPlayersList.ContainsKey(match.Home.TeamId ?? -1) ? @teamPlayersList[match.Home.TeamId ?? -1] : "Loading ...")</text>
							}
						</div>
					</div>
				}
			</details>
		}
	</div>
	<h2>Team Stats</h2>
	<div id="teamstats" class="card">
		<div>
			<div>Captain: <span>@team?.Captain?.Name</span></div>
			<div>Caption: <span>@teamStats?.Competition.Value > @teamStats?.Division.Value</span></div>
		</div>
		<div id="players">
			<h3>Players</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Name</th>
						<th>Played</th>
						<th>Win %</th>
						<th>Ranking</th>
						<th class="">PoM</th>
						<th>Form</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var player in teamStats!.Players.OrderByDescending(p => p.Average).ThenByDescending(p => p.Played)) {
						<tr>
							@{string rankingPosition = rankings.GetValueOrDefault(player.Id)?.Position.ToString() ?? "";}
							<td><a href="TTLeagues/PlayerSummary/@TTInfoId/@player.Name/@player.Id">@player.Name</a></td>
							<td><span>@(new string('0', 2 - player.Played.ToString().Length))</span>@player.Played</td>
							<td><span>@(new string('0', 3 - Math.Round(player.Average, 0).ToString("##0").Length))</span>@($"{Math.Round(player.Average, 0):##0}")%</td>
							<td><span>@(new string('0', 3 - rankingPosition.Length))</span>@rankingPosition</td>
							<td><span>@(new string('0', 2 - (player.Potm).ToString().Length))</span>@(player.Potm)</td>
							<td>@CalculateForm(player.Matches)</td>
						</tr>
					}
					@foreach (var teamMember in teamMembers) {
						@if (!teamStats!.Players.Any(p => p.Id == teamMember.MemberId)) {
							<tr>
								@{string rankingPosition = rankings.GetValueOrDefault(teamMember.MemberId)?.Position.ToString() ?? "";}
								<td>@teamMember.Name</td>
								<td><span>@(new string('0', 2 - "0".Length))</span>0</td>
								<td><span>@(new string('0', 3 - "n/a".Length))</span>n/a</td>
								<td><span>@(new string('0', 3 - rankingPosition.Length))</span>@rankingPosition</td>
								<td><span>@(new string('0', 2 - "0".Length))</span>0</td>
								<td></td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
		<div id="results">
			<h3>Results</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Opposition</th>
						<th>Home Or Away</th>
						<th>Date</th>
						<th>Score</th>
						<th>Pts</th>
						<th>Player Of The Match</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var result in teamStats!.Results) {
						<tr data-result='@CalculateMatchResult(result.For, result.Against)'>
							<td><a href="TTLeagues/TeamSummary/@TTInfoId/@result.Versus.Value">@result.Versus.Value</a></td>
							<td>@(result.Home ? "Home" : "Away")</td>
							<td>@result.Date.ToUKTime().ToString("dd MMM yyyy")</td>
							<td><a href="@result.MatchId" target="_blank" rel="noopener"><span>@(new string('0', 2 - $"{result.For}".Length))</span>@result.For-@result.Against<span>@(new string('0', 2 - $"{result.Against}".Length))</span></a></td>
							<td><span>@(new string('0', 2 - result.For.ToString().Length))</span>@result.For</td>
							<td>@result.Potm</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}


@code {
	[EditorRequired]
	[Parameter]
	public string TeamName { get; set; } = "";

	[EditorRequired]
	[Parameter]
	public string TTInfoId { get; set; } = "";

	[Parameter]
	public int TeamId { get; set; }

	private record FixtureResult(int Id, string Result, string FullScore);

	private League? league;
	private Team? team;
	private TeamStats? teamStats;
	private List<TeamMember> teamMembers = [];
	private List<Match> fixtures = [];
	private Dictionary<string, Ranking> rankings = [];
	private Dictionary<int, MatchCard> matchCards = [];
	private Dictionary<int, FixtureResult> fixtureResults = [];
	private Dictionary<int, string> teamPlayersList = [];

	protected override async Task OnParametersSetAsync()
	{
		TeamName = HttpUtility.HtmlDecode(TeamName);

		fixtures = [];
		fixtureResults = [];
		StateHasChanged();
		league = await _ttleagues.GetLeague(TTInfoId);
		int competitionId = league?.CurrentCompetitions.First().Id ?? int.MinValue;
		if (TeamId <= 0) {
			TeamId = await _ttleagues.GetId(TeamName, LookupType.Team, TTInfoId, competitionId) ?? int.MinValue;
		}

		team = await _ttleagues.GetTeam(TeamId, TTInfoId);
		if (team is null) {
			return;
		}
		competitionId = team.CompetitionId ?? int.MinValue;
		teamStats = await _ttleagues.GetTeamStats(TeamId, TTInfoId, competitionId);
		teamMembers = await _ttleagues.GetTeamMembers(TeamId, TTInfoId);
		rankings = (await _ttleagues.GetRankings(TTInfoId)).ToDictionary(r => r.UserId);

		// Fixtures? allFixtures = await _ttleagues.GetAllFixturesWithMatchResults(TTInfoId, competitionId);
		Fixtures? allFixtures = await _ttleagues.GetAllFixtures(TTInfoId, competitionId);

		fixtures = allFixtures?.Matches
			.Where(f => string.Equals(f.Home.Name, TeamName, StringComparison.CurrentCultureIgnoreCase) || string.Equals(f.Away.Name, TeamName, StringComparison.CurrentCultureIgnoreCase))
			.Where(f => !(string.Equals(f.Home.Name, "Free", StringComparison.CurrentCultureIgnoreCase) || string.Equals(f.Away.Name, "Free", StringComparison.CurrentCultureIgnoreCase)))
			.OrderBy(m => m.Time)
			.ToList() ?? [];

		foreach (Match match in fixtures) {
			if (match.HasResults) {
				MatchCard? matchCard = await _ttleagues.GetMatch(match.Id, TTInfoId);
				if (matchCard is null) {
					break;
				}
				matchCards.Add(matchCard.Id, matchCard);
				string result;
				string fullScore;
				if (matchCard.Match.Home.Name.Equals(TeamName, StringComparison.CurrentCultureIgnoreCase)) {
					result = CalculateMatchResult(matchCard.Match.Home.Score ?? 0, matchCard.Match.Away.Score ?? 0);
					fullScore = $"{matchCard.Match.Home.Score} - {matchCard.Match.Away.Score}";
				} else {
					result = CalculateMatchResult(match.Away.Score ?? 0, match.Home.Score ?? 0);
					fullScore = $"{matchCard.Match.Away.Score} - {matchCard.Match.Home.Score}";
				}
				fixtureResults.TryAdd(matchCard.Id, new(matchCard.Id, result, fullScore));
			}
		}

		StateHasChanged();

		List<int> teamList = fixtures
			.Select(t => t.Home.TeamId ?? 0)
			.Union(fixtures.Select(t => t.Away.TeamId ?? 0))
			.Where(id => id != TeamId)
			.Distinct()
			.ToList();
		List<Task<string>> tasks = [];
		foreach (int id in teamList) {
			tasks.Add(GetTeamPlayers(id, competitionId));			
		}
		await Task.WhenAll(tasks);

		StateHasChanged();
	}

	protected async Task<string> GetTeamPlayers(int teamId, int competitionId)
	{
		string playersString;

		if (teamPlayersList.ContainsKey(teamId)) {
			playersString = teamPlayersList[teamId];
		} else {
			List<TeamStatsPlayer>? players = (await _ttleagues.GetTeamStats(teamId, TTInfoId, competitionId))?.Players.ToList();
			if (players is null) {
				return "";
			}
			var playersList = players
				.OrderByDescending(p => p.Average)
				.Select(p => $"{p.Name} ({Math.Round(p.Average, 0)}%)");
			playersString = String.Join(", ", playersList);
			teamPlayersList.TryAdd(teamId, playersString);
		}
		return playersString;
	}

	string CalculateForm(IReadOnlyList<TeamStatsMatch> matches)
	{
		return String.Join(",", matches.Take(6).Select(m => m.Form.ToString()));
	}

	string? CalculateDoublesWinners(MatchCard matchCard)
	{
		int HomeTotal = matchCard.Results.Home.Select(m => m.Score ?? 0).Sum();
		int AwayTotal = matchCard.Results.Away.Select(m => m.Score ?? 0).Sum();

		if (matchCard.Match.Home.Score - HomeTotal >= 1 && matchCard.Match.Away.Score == AwayTotal) {
			return $"Doubles: {matchCard.Match.Home.Name}";
		}

		if (matchCard.Match.Away.Score - AwayTotal >= 1 && matchCard.Match.Home.Score == HomeTotal) {
			return $"Doubles: {matchCard.Match.Away.Name}";
		}

		return null;
	}

	string CalculateMatchHref(Match match)
	{
		return $"https://{TTInfoId}.ttleagues.com/league/{match.CompetitionId}/division/{match.DivisionId}/match/{match.Id}";
	}

	string CalculateMatchResult(int scoreFor, int scoreAgainst)
	{
		return (scoreFor - scoreAgainst) switch
		{
			> 0 => "win",
			< 0 => "loss",
			  0 => "draw",
		};
	}
}
