@page "/TTLeagues/LeagueSummary/{TTInfoId}/{CompetitionId:int?}"
@inject TTLeaguesReader _ttleagues
@attribute [StreamRendering]

<PageTitle>@LeagueName</PageTitle>
<h1>@LeagueName</h1>

@if (League is null) {
	<div>Loading... @LeagueName</div>
} else {
	@foreach (Competition competition in League.CurrentCompetitions.Where(c => CompetitionId is null || c.Id == CompetitionId))
	{
		<div>
			@if (!divisionsList.TryGetValue(competition.Id, out List<Division>? divisions)) {
				<div>Loading @competition.Name ... </div>
			} else {
				<h2>@competition.Name</h2>
				@foreach (Division? division in divisions)
				{
					<h2>@division.Name</h2>
					<div class="division">
						<table class="table table-bordered table-sm">
							<thead>
								<tr>
									<th>#</th>
									<th>Team</th>
									<th>P</th>
									<th>W</th>
									<th>D</th>
									<th>L</th>
									<th>SF</th>
									<th>SA</th>
									<th>Avg</th>
									<th>Pts</th>
								</tr>
							</thead>
							<tbody>
								@if (!teamStandingsList.TryGetValue(division.Id, out List<TeamStanding>? teamStandings)) {
									<tr><td colspan="10">Loading @division.Name ... </td></tr>
								} else {
									@foreach (TeamStanding team in teamStandings) {
									<tr>
										<td>@team.Position</td>
											<td><a href="TTLeagues/TeamSummary/@TTInfoId/@team.Name/@team.TeamId">@team.Name</a></td>
										<td>@team.Played</td>
										<td>@team.Won</td>
										<td>@team.Drawn</td>
										<td>@team.Lost</td>
										<td>@team.SetsFor</td>
										<td>@team.SetsAgainst</td>
										<td>@(team.Points > 0 ? $"{100 * team.Points / (team.SetsAgainst + team.SetsFor):0}%" : "0")</td>
										<td>@team.Points</td>
									</tr>
									}
								}
							</tbody>
						</table>
					</div>
				}
			}
		</div>
	}
	<br />
	<dl>
		<dt>Name</dt>
		<dd>@League.TenantsHost?.Name</dd>
		<dt>Description</dt>
		<dd>@League.WebsitesHost?.Description</dd>
		<dt>URL</dt>
		<dd><a href="@($"https://{League.TenantsHost?.Host}")" target="_blank">@($"https://{League.TenantsHost?.Host}")</a></dd>
		<dt>Theme</dt>
		@* <dd>@League.Theme</dd> *@
		<dt>Current Seasons</dt>
		<dd>
			<select @bind="currentCompetition">
				@if (competitionNames.Any()) {
					@foreach (var season in competitionNames) {
						<option value="@season">@season</option>
					}
				}
			</select>
		</dd>
		<dt>Previous Seasons</dt>
		<dd>@string.Join(", ", League.ArchivedCompetitions.OrderByDescending(s => s.Id).Select(s => s.Name))</dd>
	</dl>
}
 
@code {
	[EditorRequired]
	[Parameter]
	public string TTInfoId { get; set; } = "";

	[EditorRequired]
	[Parameter]
	public int? CompetitionId { get; set; }

	private string LeagueName { get; set; } = "";
	private League? League;
	private string currentCompetition = "";
	private List<String> competitionNames = [];
	private Dictionary<int, List<Division>> divisionsList = [];
	private Dictionary<int, List<TeamStanding>> teamStandingsList = [];

	private List<Division> divisions = [];

	protected override async Task OnParametersSetAsync()
	{
		if (League is null) {
			LeagueName = $"{TTInfoId} League";
			League = await _ttleagues.GetLeague(TTInfoId);
			LeagueName = @League?.TenantsHost?.Name ?? "";
			StateHasChanged();
			competitionNames = League?.CurrentCompetitions.Select(s => s.Name).OrderByDescending(s => s).ToList() ?? [];
			if (CompetitionId is null) {
				if (League?.CurrentCompetitions.Any() ?? false) {
					foreach (Competition competition in League.CurrentCompetitions) {
						List<Division>? divisions = await _ttleagues.GetDivisions(TTInfoId, competition.Id);
						divisionsList.TryAdd(competition.Id, divisions);
						StateHasChanged();
					}
				}
			} else {
				List<Division>? divisions = await _ttleagues.GetDivisions(TTInfoId, (int)CompetitionId);
				divisionsList.TryAdd((int)CompetitionId, divisions);
			}
			foreach (List<Division> divisions in divisionsList.Values) {
				foreach (Division division in divisions)
				{
					List<TeamStanding>? teamStandings = await _ttleagues.GetDivisionStandings(division.Id, TTInfoId);
					if (teamStandings is not null)
					{
						teamStandingsList.TryAdd(division.Id, teamStandings);
					}
				}
				StateHasChanged();
			}
		}
		if (CompetitionId is not null) {
			currentCompetition = League?.CurrentCompetitions.Single(s => s.Id == CompetitionId).Name ?? "";
		}
	}

}
