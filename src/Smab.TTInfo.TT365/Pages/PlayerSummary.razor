@page "/PlayerSummary/{LeagueId}/{PlayerName}/{PlayerId:int}"
@inject ITT365Reader _tt365
@attribute [StreamRendering]

<PageTitle>@PlayerName.Replace("_", " ") - @LeagueId</PageTitle>

@if (playerResults is null || playerResults.Count == 0) {
	<h1>Loading ... @PlayerName ...</h1>
} else {
	<h1>Player Stats for @PlayerName</h1>
	<div id="results">
		@foreach (string teamName in playerTeams) {
			List<PlayerResult> results = [.. playerResults
				.Where(p => p.PlayerTeamName == teamName)
				.OrderByDescending(p => p.Date)
				.ThenByDescending(p => p.OriginalSortOrder)
				];
			<h3>@teamName</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Opponent</th>
						<th>Div</th>
						<th>Team</th>
						<th>Date</th>
						<th>Games</th>
						<th>Score</th>
						<th>Ranking</th>
					</tr>
				</thead>
				<tbody>
					@foreach (PlayerResult result in results) {
						<tr data-result='@result.Result.ToLower()'>
							<td><a href="PlayerSummary/@LeagueId/@result.Opponent.Name.Replace(" ", "_")/@result.Opponent.Id">@result.Opponent.Name</a></td>
							<td>@result.Division.Replace("Division_", "")</td>
							<td>@result.OpponentTeam</td>
							<td>@result.Date.ToString("dd MMM yyyy")</td>
							<td><a href="@result.MatchCardURL" target="_blank" rel="noopener">@result.GameScore</a></td>
							<td>@result.Scores.Replace(",",", ")</td>
							<td>@result.FormattedRankingDiff</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>
}

@code {
	[EditorRequired]
	[Parameter]
	public int PlayerId { get; set; }

	[EditorRequired]
	[Parameter]
	public string PlayerName { get; set; } = "";

	[EditorRequired]
	[Parameter]
	public string LeagueId { get; set; } = "";

	private record FixtureResult(int Id, string Result, string FullScore);

	private List<PlayerResult> playerResults = [];
	private List<string> playerTeams = [];
	private League? league;
	private Dictionary<string, List<PlayerResult>> previousPlayerResults = [];

	protected override async Task OnParametersSetAsync()
	{
		PlayerName = PlayerName.Replace("_", " ");
		playerResults = new();
		StateHasChanged();
		league = await _tt365.GetLeague(LeagueId);
		if (league is null) {
			return;
		}
		Player player = new()
			{
				Name = PlayerName,
				PlayerId = PlayerId,
			};
		Player playerStats = await _tt365.GetPlayerStats(LeagueId, player) ?? new();
		if (playerStats is not null) {
			playerResults = playerStats.PlayerResults.ToList();
			playerTeams = playerResults
			.GroupBy(p => p.PlayerTeamName)
			.OrderByDescending(g => g.Count())
			.Select(g => g.Key)
			.ToList();
			StateHasChanged();
			await UpdatePlayerStatsFromPreviousSeasonAsync(league.Seasons[0].Id);
		}

	}

	private async Task UpdatePlayerStatsFromPreviousSeasonAsync(string seasonId)
	{
		if (previousPlayerResults.ContainsKey(seasonId)) {
			return;
		}
		PlayerName = PlayerName.Replace("_", " ");
		// look up player id 
		Player player = new()
			{
				Name = PlayerName,
				PlayerId = PlayerId,
			};
		Player playerStats = await _tt365.GetPlayerStats(LeagueId, player, seasonId) ?? new();
		if (playerStats is not null) {
			previousPlayerResults[seasonId] = [..playerStats.PlayerResults];
		}
	}
}
