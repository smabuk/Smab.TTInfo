@page "/Recent/{LeagueId}/{NoOfFixtures:int?}"
@inject ITT365Reader _tt365
@inject TimeProvider timeProvider
@attribute [StreamRendering]

<PageTitle>Last @NoOfFixtures Fixtures - @LeagueId</PageTitle>

<h1>Recent Results for @league?.Name @league?.GetCurrentSeason().Name</h1>

@if (fixtures is null) {
	<h2>Loading ... Results for the last @NoOfFixtures fixtures ...</h2>
} else if (fixtures.Count == 0) {
	<p>No fixtures.</p>
} else {
	<div id="fixtures">
		@foreach (Fixture fixture in fixtures) {
			FixtureResult? fr;
			fixtureResults.TryGetValue((fixture as CompletedFixture)?.Id ?? 0, out fr);
			string? fixtureStatus = null;
			if (fixture is PostponedFixture) {
				fixtureStatus = "postponed";
			}
			<details class="card" data-result='@(fixtureStatus)'>
				<summary class="row">
					<div class="col-8 col-md-2 col-lg-2">
						<time datetime="@fixture.Date.ToString("yyyy-MM-dd")">@fixture.Date.ToString("ddd dd MMM")</time>
					</div>
					<div class="col-4 col-md-2 col-lg-2 text-end text-md-start">
						@fixture.Division
					</div>
					<div class="col-12 col-md-8 col-lg-8">
						@if (fixture is PostponedFixture pf) {
							<span class="badge postponed" title="@pf.Reason">P</span>
						}
						@if (fixture is CompletedFixture completedFixture1 && fr is not null) {
							<a class="badge badge-sm" href="@completedFixture1.CardURL" target="_blank" rel="noopener">@fr.FullScore</a>
						}
						<a href="TeamSummary/@LeagueId/@fixture.HomeTeam">
							@if (fr is not null && fr.HomeWin) {
								<strong>@fixture.HomeTeam</strong>
							} else {
								<span>@fixture.HomeTeam</span>
							}
						</a>
						vs
						<a href="TeamSummary/@LeagueId/@fixture.AwayTeam">
							@if (fr is not null && fr.AwayWin) {
								<strong>@fixture.AwayTeam</strong>
							} else {
								<span>@fixture.AwayTeam</span>
							}
						</a>
					</div>
				</summary>
				@if (fixture is PostponedFixture postponed) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-8">
							@postponed.Reason
						</div>
					</div>
				}
				@if (fixture is CompletedFixture completedFixture) {
					@if (  completedFixture.HomePlayers.Count == 0
						&& completedFixture.AwayPlayers.Count == 0
						&& (completedFixture.ForHome == 10 || completedFixture.ForAway == 10))
						{
						<div class="row justify-content-end">
							<div class="col-12 col-md-11">
								Conceded
							</div>
						</div>
					} else {
						<div class="row justify-content-end">
							<div class="col-12 col-md-11">
								Home:
								@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon)) {
									<span class="@(player.PoM ? "pom" : "")"><text>@($"{player.Name} {player.SetsWon} ")</text></span>
								}
							</div>
						</div>
						<div class="row justify-content-end">
							<div class="col-12 col-md-11">
								Away:
								@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon)) {
									<span class="@(player.PoM ? "pom" : "")">@($"{player.Name} {player.SetsWon} ")</span>
								}
							</div>
						</div>
						<div class="row justify-content-end">
							<div class="col-12 col-md-11">
								Doubles: @completedFixture.DoublesWinner
							</div>
						</div>
					}
				}
			</details>
		}
	</div>
}



