@page "/TeamSummary/{LeagueId}/{TeamId}"
@inject ITT365Reader _tt365
@attribute [StreamRendering]

<PageTitle>@TeamName - @LeagueId</PageTitle>

@if (team is null || fixtures.Count == 0) {
	<h1>Loading ... @TeamName ...</h1>
} else {
	<h1>@league?.Name @league?.GetCurrentSeason().Name</h1>
	<h1>@TeamName</h1>
	<div id="fixtures">
		@foreach (Fixture fixture in fixtures) {
			FixtureResult? fr;
			fixtureResults.TryGetValue((fixture as CompletedFixture)?.Id ?? 0, out fr);
			string? fixtureStatus = fixture switch {
				PostponedFixture => "postponed",
				RearrangedFixture => "rearranged",
				VoidFixture => "void",
				_ => null,
			};
			<details class="card" data-result='@(fr?.Result ?? fixtureStatus)'>
				<summary class="row">
					<div class="col-12 col-sm-3 col-md-3 col-lg-3">
						<time datetime="@fixture.Date.ToUtcString()">
							@fixture.Date.ToString("ddd dd MMM")
							@if (fixture is not (VoidFixture or CompletedFixture) && fixture.HasDefaultTime() is false) {
								<span class="@(fixture.HasDefaultTime() ? null : "start-time-not-default")">@fixture.Time().ToString(" HH:mm")</span>
							}
						</time>
					</div>
					<div class="col-12 col-sm-9 col-md-9 col-lg-9">
						@if (fixture is PostponedFixture pf) {
							<span class="postponed badge" title="@pf.Reason">P</span>
						}
						@if (fixture is RearrangedFixture rf) {
							<span class="rearranged badge" title="@rf.Reason (originally @rf.OriginalDate.ToString("ddd dd MMM"))">R</span>
						}
						@if (fixture is VoidFixture vf) {
							<span class="void badge" title="@vf.Reason">Void</span>
						}
						@if (fixture is CompletedFixture completedFixture1 && fr is not null) {
							<a class="badge badge-sm" href="@completedFixture1.CardURL" target="_blank" rel="noopener">@fr.FullScore</a>
						}
						<a href="TeamSummary/@LeagueId/@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)">
							<strong>@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)</strong>
						</a>
						<span> @@ @fixture.Venue</span>
					</div>
				</summary>
				@if (fixture is PostponedFixture postponed) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-9">
							@postponed.Reason
						</div>
					</div>
				}
				@if (fixture is RearrangedFixture rearranged) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-9">
							Original Date: @rearranged.OriginalDate.ToString("ddd dd MMM")
						</div>
					</div>
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-9">
							Reason: @rearranged.Reason
						</div>
					</div>
				}
				@if (fixture is VoidFixture voidFixture) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-9">
							@voidFixture.Reason
						</div>
					</div>
				}
				@if (fixture is CompletedFixture completedFixture) {
					@if (  completedFixture.HomePlayers.Count == 0
						&& completedFixture.AwayPlayers.Count == 0
						&& (completedFixture.ForHome == 10 || completedFixture.ForAway == 10)) {
						<div class="row justify-content-end">
							<div class="col-12 col-md-9 col-lg-9">
								Conceded
							</div>
						</div>
					} else {
						@if (completedFixture.Other is not null) {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-9">
									@completedFixture.Other
								</div>
							</div>
						}
						@if (fixture.HomeTeam.Equals(@team.Name)) {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-9">
									@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</text></span>
									}
								</div>
							</div>
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-9">
									@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</span>
									}
								</div>
							</div>
						} else {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-9">
									@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</span>
									}
								</div>
							</div>
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-9">
									@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</text></span>
									}
								</div>
							</div>
						}
						<div class="row justify-content-end">
							<div class="col-12 col-sm-9 col-md-9 col-lg-9">
								Doubles: @completedFixture.DoublesWinner
							</div>
						</div>
					}
				} else if (fixture is not VoidFixture) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-9">
							@{string opposingTeam = fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam;}
							@if (teamPlayersList.ContainsKey(opposingTeam)) {
								@foreach (Player player in teamPlayersList[opposingTeam].OrderByDescending(p => p.WinPercentage)) {
									<text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" ({Math.Round(player.WinPercentage, 0)}%) ")</text>
								}
							} else {
								<text>Loading ...</text>
							}
						</div>
					</div>
				}
			</details>
		}
	</div>
	<h2>Team Stats</h2>
	<div id="teamstats" class="card">
		<div>
			<div>
				Captain: <span>@team.Captain</span>
				<span> 📞 <a href="tel:@(team.CaptainPhone)">@team.CaptainPhone</a></span>
				@if (!string.IsNullOrWhiteSpace(@team.CaptainEmailAddress))
				{
					<span> ✉️ <a href="mailto:@(team.CaptainEmailAddress)">@team.CaptainEmailAddress</a></span>
				}
			</div>
			<div>Caption: <span>@team.Caption</span></div>
		</div>
		<div id="players">
			@{
				bool hasLeagueRankings = team.Players!.Any(p => p.LeagueRanking is not 0);
			}
			<h3>Players</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Name</th>
						<th>Played</th>
						<th>Win %</th>
						@if	(hasLeagueRankings) {
							<th>Ranking</th>
						}
						<th class="">PoM</th>
						<th>Form</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Player player in team.Players!.OrderByDescending(p => p.WinPercentage).ThenByDescending(p => p.Played)) {
						<tr>
							@* <td><a href="@player.PlayerURL" target="_blank" rel="noopener">@player.Name</a></td> *@
							<td><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@player.Name</a></td>
							<td><span>@(new string('0', 2 - player.Played.ToString().Length))</span>@player.Played</td>
							<td><span>@(new string('0', 3 - Math.Round(player.WinPercentage, 0).ToString("##0").Length))</span>@($"{Math.Round(player.WinPercentage, 0):##0}")%</td>
							@if (hasLeagueRankings) {
								<td><span>@(new string('0', 3 - player.LeagueRanking.ToString().Length))</span>@player.LeagueRanking</td>
							}
							<td><span>@(new string('0', 2 - player.PoMAwards.ToString().Length))</span>@player.PoMAwards</td>
							<td>@player.Form</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div id="results">
			<h3>Results</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Opposition</th>
						<th>Home Or Away</th>
						<th>Date</th>
						<th>Score</th>
						<th>Pts</th>
						<th>Player Of The Match</th>
					</tr>
				</thead>
				<tbody>
					@if (team.Results is null || team.Results.Count == 0) {
						<tr><td colspan="6">No results</td></tr>
					} else {
						@foreach (TeamResult result in team.Results)
						{
							<tr data-result='@result.MatchResult'>
								<td><a href="TeamSummary/@LeagueId/@result.Opposition">@result.Opposition</a></td>
								<td>@result.HomeOrAway</td>
								<td>@result.Date.ToString("dd MMM yyyy")</td>
								<td><a href="@result.CardURL" target="_blank" rel="noopener"><span>@(new string('0', 2 - $"{result.ScoreForTeam}".Length))</span>@result.ScoreForTeam-@result.ScoreForOpposition<span>@(new string('0', 2 - $"{result.ScoreForOpposition}".Length))</span></a></td>
								<td><span>@(new string('0', 2 - result.Points.ToString().Length))</span>@result.Points</td>
								<td>@result.PlayerOfTheMatch</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
		<div id="division">
			<DivisionSummary DivisionName="@fixtures.First().Division" LeagueId="@LeagueId" SeasonId="@league?.CurrentSeason.Id"/>
		</div>
	</div>
}



