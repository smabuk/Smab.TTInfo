@page "/TeamSummary/{LeagueId}/{TeamId}"
@inject ITT365Reader _tt365
@attribute [StreamRendering]

<PageTitle>@TeamName - @LeagueId</PageTitle>

@if (team is null || fixtures.Count == 0) {
	<h1>Loading ... @TeamName ...</h1>
} else {
	<h1>@TeamName</h1>
	<div id="fixtures">
		@foreach (Fixture fixture in fixtures) {
			FixtureResult? fr;
			fixtureResults.TryGetValue((fixture as CompletedFixture)?.Id ?? 0, out fr);
			string? fixtureStatus = fixture switch {
				PostponedFixture => "postponed",
				RearrangedFixture => "rearranged",
				_ => null,
			};
			<details class="card" data-result='@(fr?.Result ?? fixtureStatus)'>
				<summary class="row">
					<div class="col-12 col-sm-3 col-md-3 col-lg-2">
						<time datetime="@fixture.Date.ToUtcString()">@fixture.Date.ToString("ddd dd MMM")</time>
					</div>
					<div class="col-12 col-sm-9 col-md-9 col-lg-10">
						@if (fixture is PostponedFixture pf) {
							<span class="postponed badge" title="@pf.Reason">P</span>
						}
						@if (fixture is RearrangedFixture rf) {
							<span class="rearranged badge" title="@rf.Reason (originally @rf.OriginalDate.ToString("ddd dd MMM"))">R</span>
						}
						@if (fixture is CompletedFixture completedFixture1 && fr is not null) {
							<a class="badge badge-sm" href="@completedFixture1.CardURL" target="_blank" rel="noopener">@fr.FullScore</a>
						}
						<a href="TeamSummary/@LeagueId/@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)">
							<strong>@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)</strong>
						</a>
						<span> @@ @fixture.Venue</span>
					</div>
				</summary>
				@if (fixture is PostponedFixture postponed) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-10">
							@postponed.Reason
						</div>
					</div>
				}
				@if (fixture is RearrangedFixture rearranged) {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-10">
							Original Date: @rearranged.OriginalDate.ToString("ddd dd MMM")
						</div>
					</div>
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-10">
							Reason: @rearranged.Reason
						</div>
					</div>
				}
				@if (fixture is CompletedFixture completedFixture) {
					@if (  completedFixture.HomePlayers.Count == 0
						&& completedFixture.AwayPlayers.Count == 0
						&& (completedFixture.ForHome == 10 || completedFixture.ForAway == 10)) {
						<div class="row justify-content-end">
							<div class="col-12 col-md-9 col-lg-10">
								Conceded
							</div>
						</div>
					} else {
						@if (completedFixture.Other is not null) {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-10">
									@completedFixture.Other
								</div>
							</div>
						}
						@if (fixture.HomeTeam.Equals(@team.Name)) {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-10">
									@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</text></span>
									}
								</div>
							</div>
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-10">
									@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</span>
									}
								</div>
							</div>
						} else {
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-10">
									@foreach (MatchPlayer player in completedFixture.AwayPlayers.OrderByDescending(p => p.PoM).OrderByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</span>
									}
								</div>
							</div>
							<div class="row justify-content-end">
								<div class="col-12 col-md-9 col-lg-10">
									@foreach (MatchPlayer player in completedFixture.HomePlayers.OrderByDescending(p => p.PoM).ThenByDescending(p => p.SetsWon)) {
										<span class="@(player.PoM ? "pom" : "")"><text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" {player.SetsWon} ")</text></span>
									}
								</div>
							</div>
						}
						<div class="row justify-content-end">
							<div class="col-12 col-sm-9 col-md-9 col-lg-10">
								Doubles: @completedFixture.DoublesWinner
							</div>
						</div>
					}
				} else {
					<div class="row justify-content-end">
						<div class="col-12 col-md-9 col-lg-10">
							@{string opposingTeam = fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam;}
							@if (teamPlayersList.ContainsKey(opposingTeam)) {
								@foreach (Player player in teamPlayersList[opposingTeam].OrderByDescending(p => p.WinPercentage)) {
									<text><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@($"{player.Name}")</a> @($" ({Math.Round(player.WinPercentage, 0)}%) ")</text>
								}
							} else {
								<text>Loading ...</text>
							}
						</div>
					</div>
				}
			</details>
		}
	</div>
	<h2>Team Stats</h2>
	<div id="teamstats" class="card">
		<div>
			<div>Captain: <span>@team.Captain</span></div>
			<div>Caption: <span>@team.Caption</span></div>
		</div>
		<div id="players">
			<h3>Players</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Name</th>
						<th>Played</th>
						<th>Win %</th>
						<th>Ranking</th>
						<th class="">PoM</th>
						<th>Form</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Player player in team.Players!.OrderByDescending(p => p.WinPercentage).ThenByDescending(p => p.Played)) {
						<tr>
							@* <td><a href="@player.PlayerURL" target="_blank" rel="noopener">@player.Name</a></td> *@
							<td><a href="PlayerSummary/@LeagueId/@player.Name.Replace(" ", "_")/@player.Id">@player.Name</a></td>
							<td><span>@(new string('0', 2 - player.Played.ToString().Length))</span>@player.Played</td>
							<td><span>@(new string('0', 3 - Math.Round(player.WinPercentage, 0).ToString("##0").Length))</span>@($"{Math.Round(player.WinPercentage, 0):##0}")%</td>
							<td><span>@(new string('0', 3 - player.LeagueRanking.ToString().Length))</span>@player.LeagueRanking</td>
							<td><span>@(new string('0', 2 - player.PoMAwards.ToString().Length))</span>@player.PoMAwards</td>
							<td>@player.Form</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<div id="results">
			<h3>Results</h3>
			<table class="table table-bordered table-sm">
				<thead>
					<tr>
						<th>Opposition</th>
						<th>Home Or Away</th>
						<th>Date</th>
						<th>Score</th>
						<th>Pts</th>
						<th>Player Of The Match</th>
					</tr>
				</thead>
				<tbody>
					@if (team.Results is null || team.Results.Count == 0) {
						<tr><td colspan="6">No results</td></tr>
					} else {
						@foreach (TeamResult result in team.Results)
						{
							<tr data-result='@result.MatchResult'>
								<td><a href="TeamSummary/@LeagueId/@result.Opposition">@result.Opposition</a></td>
								<td>@result.HomeOrAway</td>
								<td>@result.Date.ToString("dd MMM yyyy")</td>
								<td><a href="@result.CardURL" target="_blank" rel="noopener"><span>@(new string('0', 2 - $"{result.ScoreForTeam}".Length))</span>@result.ScoreForTeam-@result.ScoreForOpposition<span>@(new string('0', 2 - $"{result.ScoreForOpposition}".Length))</span></a></td>
								<td><span>@(new string('0', 2 - result.Points.ToString().Length))</span>@result.Points</td>
								<td>@result.PlayerOfTheMatch</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
}


@code {
	[EditorRequired]
	[Parameter]
	public string TeamId { get; set; } = "";

	[EditorRequired]
	[Parameter]
	public string LeagueId { get; set; } = "";

	private record FixtureResult(int Id, string Result, string FullScore);

	public string TeamName { get; set; } = "";
	private Team? team;
	private List<Fixture> fixtures = [];
	private Dictionary<string, List<Player>> teamPlayersList = new();
	private Dictionary<int, FixtureResult> fixtureResults = new();
	private League? league;

	protected override async Task OnParametersSetAsync()
	{
		TeamName = TeamId.Replace("_", " ");
		team = null;
		fixtures = new();
		fixtureResults = new();
		StateHasChanged();
		league = await _tt365.GetLeague((TT365LeagueId)LeagueId);
		team = await _tt365.GetTeamStats((TT365LeagueId)LeagueId, TeamName);
		if (team is not null) {

			fixtures = (await _tt365.GetAllFixtures((TT365LeagueId)LeagueId, league?.CurrentSeason.GetSeasonId()) ?? [])
							.Where(f => string.Equals(f.HomeTeam, TeamName, StringComparison.CurrentCultureIgnoreCase) || string.Equals(f.AwayTeam, TeamName, StringComparison.CurrentCultureIgnoreCase))
							.ToList();
			foreach (Fixture fixture in fixtures) {
				if (fixture is CompletedFixture completedFixture) {
					string result;
					string fullScore;
					if (fixture.HomeTeam.Equals(@team.Name)) {
						result = (completedFixture.ForHome > completedFixture.ForAway) ? "win" : (completedFixture.ForHome < completedFixture.ForAway) ? "loss" : "draw";
						fullScore = $"{completedFixture.ForHome} - {completedFixture.ForAway}";
					} else {
						result = (completedFixture.ForHome > completedFixture.ForAway) ? "loss" : (completedFixture.ForHome < completedFixture.ForAway) ? "win" : "draw";
						fullScore = $"{completedFixture.ForAway} - {completedFixture.ForHome}";
					}
					fixtureResults.TryAdd(completedFixture.Id, new(completedFixture.Id, result, fullScore));
				}
			}

			StateHasChanged();

			List<string> teamList = fixtures
				.Select(t => t.HomeTeam)
				.Union(fixtures
						.Select(t => t.HomeTeam))
						.Distinct()
						.Where(t => t != TeamId)
				.ToList();
			List<Task<IEnumerable<Player>>> tasks = [];
			foreach (string team in teamList) {
				tasks.Add(GetTeamPlayers(team));
			}

			await foreach (Task task in Task.WhenEach(tasks))
			{
				StateHasChanged();
			}
		}
	}

	protected async Task<IEnumerable<Player>> GetTeamPlayers(string teamName)
	{
		if (teamPlayersList.ContainsKey(teamName)) {
			return teamPlayersList[teamName];
		} else {
			ICollection<Player>? players = (await _tt365.GetTeamStats((TT365LeagueId)LeagueId, teamName))?.Players;
			if (players is null) {
				return [];
			}
			teamPlayersList.TryAdd(teamName, [.. players]);
			return players;
		}
	}

	private string PlayersAverages(IEnumerable<Player> players)
	{
		IEnumerable<string> playersList = players
			.OrderByDescending(p => p.WinPercentage)
			.Select(p => $"{p.Name} ({Math.Round(p.WinPercentage, 0)}%)");
		return String.Join(", ", playersList);
	}
}
