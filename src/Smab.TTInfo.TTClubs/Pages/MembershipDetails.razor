@page "/club/{clubId}/membership"
@page "/club/{clubId}/membership/{MembershipId:int?}"
@using Microsoft.Extensions.Configuration
@inject TTClubsReader _TTClubsReader
@inject IConfiguration _configuration
@rendermode InteractiveServer

@if (Memberships is not null && MembershipId is null)
{
	<PageTitle>@($"{ClubId}") Memberships</PageTitle>
	<h1>Memberships for @($"https://{ClubId.ToLowerInvariant()}.ttclubs.co.uk")</h1>
	@foreach (MembershipsItem membershipsItem in Memberships?.Items ?? [])
	{
		<MembershipDetails ClubId="@ClubId" MembershipId="@membershipsItem.Id" MembershipName="@membershipsItem.Name" />
	}
} else
{
	@* <PageTitle>@($"{ClubId}") - @MembershipName</PageTitle> *@

	<h2>@MembershipName <span>(@FilteredItems.Count() members)</span></h2>

	<div class="table-responsive">
		<table class="table table-striped table-hover">
			<thead class="table-dark">
				<tr>
					<th scope="col">
						<button class="btn" @onclick="() => SortBy(nameof(SortableField.Name))">
							Name @SortIndicator(SortableField.Name)
						</button>
					</th>
					<th scope="col">
						<button class="btn" @onclick="() => SortBy(nameof(SortableField.MembershipNo))">
							TTE # @SortIndicator(SortableField.MembershipNo)
						</button>
					</th>
					<th scope="col">
						<button class="btn" @onclick="() => SortBy(nameof(SortableField.Gender))">
							Gender @SortIndicator(SortableField.Gender)
						</button>
					</th>
					<th scope="col">
						<button class="btn" @onclick="() => SortBy(nameof(SortableField.MembershipType))">
							Membership Type @SortIndicator(SortableField.MembershipType)
						</button>
					</th>
					@if (IsDevelopment)
					{
						<th scope="col">Email</th>
						<th scope="col">Phone</th>
						<th scope="col">Address</th>
					}
					@* <th scope="col">Emergency Name</th> *@
					@* <th scope="col">Emergency #</th> *@
				</tr>
			</thead>
			<tbody>
				@if (SortedItems is not null)
				{
					@foreach (MembershipItem member in SortedItems)
					{
						<tr>
							<td>@member.Contact.FullName</td>
							<td>@member.Contact.User.MembershipNo</td>
							<td>@(member.Contact.User.Gender == 1 ? "Male" : "Female")</td>
							<td>@Pretty(member.Contact.User.MembershipType)</td>
							@if (IsDevelopment)
							{
								<td><a href="mailTo:@member.Contact.User.Email">@member.Contact.User.Email</a></td>
								<td><a href="tel:@PrettyPhone(member.Contact.User.PhoneNumber)">@PrettyPhone(member.Contact.User.PhoneNumber)</a></td>
								<td>@PrettyAddress(member.Contact)</td>
							}
							@* <td>@member.Contact.EmergencyName</td> *@
							@* <td>@PrettyPhone(member.Contact.EmergencyNumber)</td> *@
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
}

@code {
	[Parameter]
	public string ClubId { get; set; } = "";

	[Parameter]
	public int? MembershipId { get; set; } = null;

	// [PersistentState]
	public Memberships? Memberships { get; set; }

	// [PersistentState]
	public Membership? Membership { get; set; }

	[Parameter]
	public string? MembershipName { get; set; }

	private string _currentSortField = "";
	private bool _sortAscending = true;

	private bool IsDevelopment => string.Equals(_configuration["ASPNETCORE_ENVIRONMENT"], "Development", StringComparison.OrdinalIgnoreCase);

	private IEnumerable<MembershipItem> FilteredItems => Membership?.Items ?? [];

	private IEnumerable<MembershipItem> SortedItems
		=> _currentSortField switch
			{
				nameof(SortableField.Name) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.FullName)
					: FilteredItems.OrderByDescending(m => m.Contact.FullName),
				nameof(SortableField.MembershipNo) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.User.MembershipNo)
					: FilteredItems.OrderByDescending(m => m.Contact.User.MembershipNo),
				nameof(SortableField.Gender) => _sortAscending
					? FilteredItems.OrderByDescending(m => m.Contact.User.Gender)
					: FilteredItems.OrderBy(m => m.Contact.User.Gender),
				nameof(SortableField.MembershipType) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.User.MembershipType)
					: FilteredItems.OrderByDescending(m => m.Contact.User.MembershipType),
				_ => FilteredItems
			};

	protected override async Task OnParametersSetAsync()
	{
		if (MembershipId is null) {
			Memberships ??= await _TTClubsReader.GetMemberships(ClubId.ToLowerInvariant());
		} else
		{
			Membership ??= await _TTClubsReader.GetMembership(ClubId.ToLowerInvariant(), (int)MembershipId);
			MembershipName ??= (await _TTClubsReader.GetMemberships(ClubId.ToLowerInvariant()))?.Items.SingleOrDefault(m => m.Id == MembershipId)?.Name ?? "Unknown";
		}
	}

	private void SortBy(string field)
	{
		if (_currentSortField == field) {
			_sortAscending = !_sortAscending;
		} else {
			_currentSortField = field;
			_sortAscending = true;
		}
	}

	private RenderFragment SortIndicator(SortableField sortableField) => builder =>
	{
		if (_currentSortField == sortableField.ToString()) {
			builder.OpenElement(0, "span");
			builder.AddAttribute(1, "data-sort-indicator", _sortAscending ? "asc" : "desc");
			builder.CloseElement();
		}
	};

	string Pretty(string input)
	{
		string newString = $"{input[0]}";

		for (int i = 1; i < input.Length; i++) {
			if (char.IsUpper(input[i])) {
				newString = $"{newString} {input[i]}";
			} else {
				newString = $"{newString}{input[i]}";
			}
		}

		return newString;
	}

	string PrettyAddress(Contact contact)
	{
		List<string> parts = [
			contact.AddressLine1,
			contact.AddressLine2,
			contact.Town,
			contact.County,
			contact.Postcode,
			contact.Country
		];
		return string.Join(", ", parts.Where(p => string.IsNullOrWhiteSpace(p) is false));
	}

	string PrettyPhone(string input)
	{
		if (string.IsNullOrWhiteSpace(input)) { return ""; }

		string newString = $"{input}"
			.Replace("+44 0", "+44")
			.Replace("+44 ", "+44")
			.Replace("+44", "+44 ")
			.Trim();

		if (newString[0] == '0') {
			newString = $"+44 {newString[1..]}";
		}

		if (newString[8] != ' ') {
			newString = $"{newString[..8]} {newString[8..]}";
		}

		return newString
			.Replace("+44 ", "0");
	}

	private enum SortableField
	{
		Name,
		MembershipNo,
		Gender,
		MembershipType
	}
}