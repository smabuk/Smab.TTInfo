@page "/club/{clubId}/membership"
@page "/club/{clubId}/membership/{MembershipId:int?}"
@inject TTClubsReader _TTClubsReader
@rendermode InteractiveServer



@if (Memberships is not null && MembershipId is null)
{
	<PageTitle>@($"{ClubId}") Memberships</PageTitle>
	<h2>Memberships for @($"https://{ClubId.ToLowerInvariant()}.ttclubs.co.uk")</h2>
	@foreach (MembershipsItem membershipsItem in Memberships?.Items ?? [])
	{
		<MembershipDetails ClubId="@ClubId" MembershipId="@membershipsItem.Id" MembershipName="@membershipsItem.Name" />
	}
} else
{
	@* <PageTitle>@($"{ClubId}") - @MembershipName</PageTitle> *@

	<h2>@MembershipName</h2>

	<div class="table-responsive">
		<table class="table table-striped table-hover">
			<thead class="table-dark">
				<tr>
					<th scope="col">
						<button class="btn btn-link text-white p-0 text-decoration-none" @onclick="() => SortBy(nameof(SortableField.Name))">
							Name
							@if (_currentSortField == nameof(SortableField.Name))
							{
								<i class="@(_sortAscending ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill")"></i>
							}
						</button>
					</th>
					<th scope="col">
						<button class="btn btn-link text-white p-0 text-decoration-none" @onclick="() => SortBy(nameof(SortableField.MembershipNo))">
							TTE #
							@if (_currentSortField == nameof(SortableField.MembershipNo))
							{
								<i class="@(_sortAscending ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill")"></i>
							}
						</button>
					</th>
					<th scope="col">
						<button class="btn btn-link text-white p-0 text-decoration-none" @onclick="() => SortBy(nameof(SortableField.Gender))">
							Gender
							@if (_currentSortField == nameof(SortableField.Gender))
							{
								<i class="@(_sortAscending ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill")"></i>
							}
						</button>
					</th>
					<th scope="col">
						<button class="btn btn-link text-white p-0 text-decoration-none" @onclick="() => SortBy(nameof(SortableField.MembershipType))">
							Membership Type
							@if (_currentSortField == nameof(SortableField.MembershipType))
							{
								<i class="@(_sortAscending ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill")"></i>
							}
						</button>
					</th>
					<th scope="col">Phone #</th>
					<th scope="col">Address</th>
					@* <th scope="col">Emergency Name</th> *@
					@* <th scope="col">Emergency #</th> *@
				</tr>
			</thead>
			<tbody>
				@if (SortedItems is not null)
				{
					@foreach (MembershipItem member in SortedItems)
					{
						<tr>
							<td>@member.Contact.FullName</td>
							<td>@member.Contact.User.MembershipNo</td>
							<td>@(member.Contact.User.Gender == 1 ? "Male" : "Female")</td>
							<td>@Pretty(member.Contact.User.MembershipType)</td>
							<td>@PrettyPhone(member.Contact.User.PhoneNumber)</td>
							<td>@PrettyAddress(member.Contact)</td>
							@* <td>@member.Contact.EmergencyName</td> *@
							@* <td>@PrettyPhone(member.Contact.EmergencyNumber)</td> *@
						</tr>
					}
				}
			</tbody>
		</table>
	</div>

	<br />
	<p><span><strong>Total Members: @FilteredItems?.Count()</strong></span></p>
}

@code {
	[Parameter]
	public string ClubId { get; set; } = "";

	[Parameter]
	public int? MembershipId { get; set; } = null;

	// [PersistentState]
	public Memberships? Memberships { get; set; }

	// [PersistentState]
	public Membership? Membership { get; set; }

	[Parameter]
	public string? MembershipName { get; set; }

	private string _currentSortField = "";
	private bool _sortAscending = true;

	private enum SortableField
	{
		Name,
		MembershipNo,
		Gender,
		MembershipType
	}

	private IEnumerable<MembershipItem>? FilteredItems => Membership?.Items;

	private IEnumerable<MembershipItem>? SortedItems
	{
		get
		{
			if (FilteredItems is null) {
				return null;
			}

			IEnumerable<MembershipItem> sorted = _currentSortField switch
			{
				nameof(SortableField.Name) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.FullName)
					: FilteredItems.OrderByDescending(m => m.Contact.FullName),
				nameof(SortableField.MembershipNo) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.User.MembershipNo)
					: FilteredItems.OrderByDescending(m => m.Contact.User.MembershipNo),
				nameof(SortableField.Gender) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.User.Gender)
					: FilteredItems.OrderByDescending(m => m.Contact.User.Gender),
				nameof(SortableField.MembershipType) => _sortAscending
					? FilteredItems.OrderBy(m => m.Contact.User.MembershipType)
					: FilteredItems.OrderByDescending(m => m.Contact.User.MembershipType),
				_ => FilteredItems
			};

			return sorted;
		}
	}

	private void SortBy(string field)
	{
		if (_currentSortField == field)
		{
			_sortAscending = !_sortAscending;
		}
		else
		{
			_currentSortField = field;
			_sortAscending = true;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		if (MembershipId is null) {
			Memberships ??= await _TTClubsReader.GetMemberships(ClubId.ToLowerInvariant());
		} else
		{
			Membership ??= await _TTClubsReader.GetMembership(ClubId.ToLowerInvariant(), (int)MembershipId);
		}
	}

	string Pretty(string input)
	{
		string newString = $"{input[0]}";

		for (int i = 1; i < input.Length; i++) {
			if (char.IsUpper(input[i])) {
				newString = $"{newString} {input[i]}";
			} else {
				newString = $"{newString}{input[i]}";
			}
		}

		return newString;
	}

	string PrettyAddress(Contact contact)
	{
		List<string> parts = [
			contact.AddressLine1,
			contact.AddressLine2,
			contact.Town,
			contact.County,
			contact.Postcode,
			contact.Country
		];
		return string.Join(", ", parts.Where(p => string.IsNullOrWhiteSpace(p) is false));
	}

	string PrettyPhone(string input)
	{
		if (string.IsNullOrWhiteSpace(input))
		{
			return "";
		}
		string newString = $"{input}";

		newString = newString
		.Replace("+44 0", "+44")
		.Replace("+44 ", "+44")
		.Replace("+44", "+44 ")
		.Trim();

		if (newString[0] == '0') {
			newString = $"+44 {newString[1..]}";
		}

		if (newString[8] != ' ') {
			newString = $"{newString[..8]} {newString[8..]}";
		}

		return newString;
	}
}