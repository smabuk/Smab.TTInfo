@page "/TeamSummary/{League}/{TeamName}"
@inject ITT365Service _tt365
<PageTitle>🏓 @TeamName - @League</PageTitle>


@if (team is null) {
    <h3>Loading ... @TeamName ...</h3>
} else {
<h3><a href="@fixturesView.URL" target="_blank" rel="noopener"><i class="fas fa-external-link-square-alt"></i></a> @TeamName</h3>
@*<h3>@fixturesView.Caption</h3>*@

<div class="container-fluid">
	@foreach (var fixture in fixturesView.Fixtures!)
	{
		<div class="row">
			<div class="col-12 col-sm-5 col-md-4 col-lg-3"><strong>@(fixture.HomeTeam.Contains("Curzon") || fixture.HomeTeam.Contains("RBL") ? "19:00" : "19:30") @fixture.Date.ToString("ddd dd MMM")</strong></div>
			<div class="col-12 col-sm-7 col-md-8 col-lg-9">
				@if (@fixture.IsCompleted)
				{
					@if (fixture.HomeTeam.Equals(@team.Name))
					{
						<a class="badge badge-sm badge-@((fixture.ForHome > fixture.ForAway) ? "success" : (fixture.ForHome < fixture.ForAway) ? "danger" : "info")" href="@fixture.CardURL" target="_blank">@fixture.ForHome - @fixture.ForAway</a>
					}
					else
					{
						<a class="badge badge-sm badge-@((fixture.ForHome > fixture.ForAway) ? "danger" : (fixture.ForHome < fixture.ForAway) ? "success" : "info")" href="@fixture.CardURL" target="_blank">@fixture.ForAway - @fixture.ForHome</a>
					}
				}
				<strong>@(fixture.HomeTeam.Equals(@team.Name) ? fixture.AwayTeam : fixture.HomeTeam)</strong>
				<span> @@ @fixture.Venue</span>
			</div>
		</div>
		<div class="row justify-content-end">
			<div class="col-12 col-md-8 col-lg-9">
				@if (fixture.HomeTeam.Equals(@team.Name))
				{
					@teamPlayersList[fixture.AwayTeam];
				}
				else
				{
					@teamPlayersList[fixture.HomeTeam];
				}
			</div>
		</div>
		<br />
		}
</div>
<h3>Team Stats</h3>
<div class="card">
    <div>
        <div>Captain: <span>@team.Captain</span></div>
        <div>Caption: <span>@team.Caption</span></div>
    </div>
    <table class="table table-bordered table-sm">
        <caption style="caption-side: top" class="container-fluid text-dark bg-light">Players</caption>
        <thead class="thead-default">
            <tr>
                <th>Name</th>
                <th>Played</th>
                <th>Win %</th>
                <th>Ranking</th>
                <th class="">PoM Awards</th>
                <th>Form</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in team.Players!)
            {
            <tr>
                <td>@player.Name</td>
                <td>@player.Played</td>
                <td>@player.WinPercentage</td>
                <td>@player.LeagueRanking</td>
                <td>@player.PoMAwards</td>
                <td>@player.Form</td>
            </tr>
            }
        </tbody>
    </table>
    <table class="table table-bordered table-sm">
        <caption style="caption-side: top" class="container-fluid text-dark bg-light">Results</caption>
        <thead class="thead-default">
            <tr>
                <th>Opposition</th>
                <th>Home Or Away</th>
                <th>Date</th>
                <th>Score</th>
                <th>Points</th>
                <th>Player Of The Match</th>
                <th>Card</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in team.Results!)
            {
                <tr>
                    <td>@result.Opposition</td>
                    <td>@result.HomeOrAway</td>
                    <td>@result.Date.ToString("ddd MMM dd yyyy")</td>
                    <td>@result.ScoreForHome-@result.ScoreForAway</td>
                    <td>@result.Points</td>
                    <td>@result.PlayerOfTheMatch</td>
                    <td><a href="@result.CardURL" target="_blank" rel="noopener"><i class="fas fa-external-link-square-alt"></i></a></td>
                </tr>
            }
        </tbody>
    </table>
</div>
<br />
}


@code {
    [EditorRequired]
    [Parameter]
    public string TeamName { get; set; } = "";

    [EditorRequired]
    [Parameter]
    public string League { get; set; } = "";

    private Team? team;
    private FixturesView? fixturesView;
	static Dictionary<string, string> teamPlayersList = new();


    protected override async Task OnParametersSetAsync() {
		TeamName = TeamName.Replace("_", " ");
        team = await _tt365.GetTeamStats(TeamName);
        if (team is not null) {
            fixturesView = await _tt365.GetFixturesByTeamName(TeamName) ?? new();
            foreach (var fixture in fixturesView.Fixtures!) 
            {
		        if (!teamPlayersList.ContainsKey(fixture.HomeTeam)) {
                    teamPlayersList.TryAdd(fixture.HomeTeam, String.Join(", ", (await _tt365.GetTeamStats(fixture.HomeTeam)).PlayersList));
		        }
		        if (!teamPlayersList.ContainsKey(fixture.AwayTeam)) {
                    teamPlayersList.TryAdd(fixture.AwayTeam, String.Join(", ", (await _tt365.GetTeamStats(fixture.AwayTeam)).PlayersList));
		        }
            }
        }
    }



}
